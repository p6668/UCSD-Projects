setu    0
setl    9
lw      r1 // load target to r2
setu    1 // 31
setl    15
mov     r4 //r4 = 31 memaddr 
setu    4 //64 global count
setl	0
mov 	r8
setu    15 //255 for max check
setl	15
mov 	r15
setu    0 
setl	3
mov	    r14  //count 4 for special case


//special case for first 4 bits since temp reg is initially 0000 first 
//4 bits that get matched should be excluded (since the algorithm 
//process a byte at a time

setu	2
setl	0
lw      r2 //load byte relax
SPECIAL:
slp		r2
slg     r3
//format
slp		r3
slp		r3
slp		r3
slp		r3
srp     r3      
srp     r3  
srp     r3  
srp     r3  
//check
clr
setu    0
setl    0
add 	r3
sub     r1
bnez 	PASS
dec 	r5
PASS:
dec     r14
setu    0
setl    0
add 	r14
bnez	SPECIAL

//clear r3!!!!
mov 	r3

NEXTBYTE:
clr
setu    0
setl	0
inc		r4
add 	r4
lw      r2 //load byte relax
setu	0
setl	8
mov		r7  //count of 8
HAHAA:
slp		r2
slg     r3
//format
slp		r3
slp		r3
slp		r3
slp		r3
srp     r3      
srp     r3  
srp     r3  
srp     r3  
//check
clr
setu    0
setl    0
add 	r3
sub     r1
bnez 	NAH
inc 	r5
dec		r15
setu    0
setl    0
add 	r15
bez 	MAXED
NAH:
dec		r7
setu    0
setl    0
add     r7
bnez	HAHAA
dec		r8
add     r8
bnez 	NEXTBYTE

MAXED:

setu    0 // store result at mem address 10
setl    10
sw      r5

halt
